unit DTSysInfo;

interface

uses
  System.SysUtils, System.Classes,DTSysInfoSystem,system.variants,Winapi.ActiveX,System.Win.ComObj,Winapi.Windows,
  Winapi.WinSock,System.Win.Registry;

type TArmazenamento = record
      Total:String;
      Livre:String;
      EmUso:String;
      Tipo:String;
end;

type
  TDTSysinfo = class(TComponent)
  private
    FArmazenamentoHD: TArmazenamento;
    FFHDRecomendado: Integer;
    procedure SetArmazenamentoHD(const Value: TArmazenamento);
    procedure SetFHDRecomendado(const Value: Integer);

  protected

  public
    function GetComputerName:string;
    function UserName: string;
    function MACAddress: string;
    function Processor: TDTProcessorArchitecture;
    function ProcessorCount: Cardinal;
    function ProcessorIdentifier: string;
    function ProcessorName: string;
    function ProcessorSpeedMHz: Cardinal;
    function Is64Bit: Boolean;
    function IsNetworkPresent: Boolean;
    function BootMode: TDTBootMode;
    function IsAdmin: Boolean;
    function IsUACActive: Boolean;
    function BiosVendor: string;
    function SystemManufacturer: string;
    function SystemProductName: string;
    function ProductName: string;
    function TipoArmazenamento: Integer;
    function Armazenamento:string;
    function TipoArmazenamentoDescricao(const ATipo: Integer): string;
    function GetTotalPhysicalMemory: Extended;
    procedure ResetMemory(out P; Size: Longint);
    function GetFreePhysicalMemory: Extended;
    function ProxyAtivo: Boolean;
    function TipoConexao: Integer;
    function TPConexao:string;
    function GetLocalIP: string;
    function UsuarioLogado : string;
  published
    property ArmazenamentoHD:TArmazenamento read FArmazenamentoHD write SetArmazenamentoHD;
    property FHDRecomendado:Integer read FFHDRecomendado write SetFHDRecomendado;

  end;

procedure Register;

implementation

const
   COUNT_MEM = 1073741824;
   TIPOS_CONEXAO: array[0..2] of string = ('Indefinida', 'Lan', 'Wi-Fi');
   _HDD = 3;
   _SSD = 4;

var
  iArmazenamentoTotal,
  iArmazenamentoLivre,
  iArmazenamentoEmUso: Real;
  iMemoriaTotal,
  iMemoriaLivre,
  iMemoriaEmUso: Real;
  iTipoArmazenamento,
  iTipoConexao : Integer;


procedure Register;
begin
  RegisterComponents('DT Inovacao', [TDTSysinfo]);
end;

{ TDTSysinfo }

function TDTSysinfo.Armazenamento: string;
begin
     iTipoArmazenamento         := TipoArmazenamento;
     iArmazenamentoTotal        := (DiskSize(0)/(1024 * 1024));
     iArmazenamentoLivre        := (DiskFree(0)/(1024 * 1024));
     iArmazenamentoEmUso        := (iArmazenamentoTotal - iArmazenamentoLivre) / 1024;
     ArmazenamentoHD.Total      := FormatFloat('###,###,##0 GB', iArmazenamentoTotal) + ' / ' + TipoArmazenamentoDescricao(iTipoArmazenamento);
     ArmazenamentoHD.Livre      := FormatFloat('###,###,##0 GB', iArmazenamentoLivre);
     ArmazenamentoHD.EmUso      := FormatFloat('###,###,##0 GB', iArmazenamentoEmUso);
     FHDRecomendado             := FormatFloat('###,###,##0 GB', 240);
     ArmazenamentoHD.Tipo       := TipoArmazenamentoDescricao(iTipoArmazenamento);
     if (iTipoArmazenamento = _SSD) then
        //pnlStatusArmazenamento.Color := clGreen
     else if (iTipoArmazenamento = _HDD) and (iArmazenamentoTotal < 240) then
        //pnlStatusArmazenamento.Color := clRed;
     if iTipoArmazenamento <> 4 then
       FHDRecomendado :=  FHDRecomendado + ' / ' + TipoArmazenamentoDescricao(4);
end;

function TDTSysinfo.BiosVendor: string;
begin
       Result := TDTComputerInfo.BiosVendor;
end;

function TDTSysinfo.BootMode: TDTBootMode;
begin
       Result := TDTComputerInfo.BootMode;
end;

function TDTSysinfo.GetComputerName: string;
begin
       Result := TDTComputerInfo.ComputerName;
end;

function TDTSysinfo.GetFreePhysicalMemory: Extended;
var
  MemoryStatusEx: TMemoryStatusEx;
  Res:extended;
begin
  ResetMemory(MemoryStatusEx, SizeOf(MemoryStatusEx));
  MemoryStatusEx.dwLength := SizeOf(MemoryStatusEx);
  if not GlobalMemoryStatusEx(MemoryStatusEx) then
    RaiseLastOSError;
  Res := MemoryStatusEx.ullAvailPhys;
  Res := Res / COUNT_MEM;
  Result :=res;
end;

function TDTSysinfo.GetLocalIP: string;
type
  TaPInAddr = array [0..10] of PInAddr;
  PaPInAddr = ^TaPInAddr;
var
  phe: PHostEnt;
  pptr: PaPInAddr;
  Buffer: array [0..63] of Ansichar;
  i: Integer;
  GInitData: TWSADATA;
begin
  WSAStartup($101, GInitData);
  Result := '';
  GetHostName(Buffer, SizeOf(Buffer));
  phe := GetHostByName(Buffer);
  if phe = nil then
    Exit;
  pptr := PaPInAddr(phe^.h_addr_list);
  i := 0;
  while pptr^[i] <> nil do
  begin
    Result := StrPas(inet_ntoa(pptr^[i]^));
    Inc(i);
  end;
  WSACleanup;
end;

function TDTSysinfo.GetTotalPhysicalMemory: Extended;
var
  MemoryStatusEx: TMemoryStatusEx;
  Res:extended;
begin
  ResetMemory(MemoryStatusEx, SizeOf(MemoryStatusEx));
  MemoryStatusEx.dwLength := SizeOf(MemoryStatusEx);
  if not GlobalMemoryStatusEx(MemoryStatusEx) then
    RaiseLastOSError;
  Res := MemoryStatusEx.ullTotalPhys;
  Res := Res / COUNT_MEM;
  Result :=res;
end;

function TDTSysinfo.Is64Bit: Boolean;
begin
       Result := TDTComputerInfo.Is64Bit;
end;

function TDTSysinfo.IsAdmin: Boolean;
begin
       Result := TDTComputerInfo.IsAdmin;
end;

function TDTSysinfo.IsNetworkPresent: Boolean;
begin
       Result := TDTComputerInfo.IsNetworkPresent;
end;

function TDTSysinfo.IsUACActive: Boolean;
begin
       Result := TDTComputerInfo.IsUACActive;
end;

function TDTSysinfo.MACAddress: string;
begin
       Result := TDTComputerInfo.MACAddress;
end;

function TDTSysinfo.Processor: TDTProcessorArchitecture;
begin
       Result := TDTComputerInfo.Processor;
end;

function TDTSysinfo.ProcessorCount: Cardinal;
begin
       Result := TDTComputerInfo.ProcessorCount;
end;

function TDTSysinfo.ProcessorIdentifier: string;
begin
       Result := TDTComputerInfo.ProcessorIdentifier;
end;

function TDTSysinfo.ProcessorName: string;
begin
       Result := TDTComputerInfo.ProcessorName
end;

function TDTSysinfo.ProcessorSpeedMHz: Cardinal;
begin
       Result := TDTComputerInfo.ProcessorSpeedMHz
end;

function TDTSysinfo.ProductName: string;
begin
       Result := TDTOSInfo.ProductName;
end;

function TDTSysinfo.ProxyAtivo: Boolean;
var
  FRegistro: TRegistry;
begin
  FRegistro := nil;
  try
    FRegistro := TRegistry.Create;
    FRegistro.RootKey := HKEY_CURRENT_USER;
    FRegistro.OpenKey('Software\Microsoft\Windows\CurrentVersion\Internet Settings',False);
    Result := FRegistro.ReadBool('ProxyEnable');
  finally
    FRegistro.Free;
  end;
end;

procedure TDTSysinfo.ResetMemory(out P; Size: Longint);
begin
  if Size > 0 then
  begin
    Byte(P) := 0;
    FillChar(P, Size, 0);
  end;
end;

procedure TDTSysinfo.SetArmazenamentoHD(const Value: TArmazenamento);
begin
  FArmazenamentoHD := Value;
end;

procedure TDTSysinfo.SetFHDRecomendado(const Value: Integer);
begin
  FFHDRecomendado := Value;
end;

function TDTSysinfo.SystemManufacturer: string;
begin
       Result := TDTComputerInfo.SystemManufacturer
end;

function TDTSysinfo.SystemProductName: string;
begin
       Result := TDTComputerInfo.SystemProductName;
end;

function TDTSysinfo.TipoArmazenamento: Integer;
function VarToInt(const AVariant: Variant): INT64;
   begin
      Result := StrToIntDef(Trim(VarToStr(AVariant)), 0);
   end;
const
   WbemUser = ''; WbemPassword = ''; WbemComputer = 'localhost';
   wbemFlagForwardOnly = $00000020;
var
   FSWbemLocator, FWMIService, FWbemObjectSet, FWbemObject : OLEVariant;
   oEnum  : IEnumvariant;
   iValue : LongWord;
begin;
   FSWbemLocator  := CreateOleObject('WbemScripting.SWbemLocator');
   FWMIService    := FSWbemLocator.ConnectServer(WbemComputer, 'root\Microsoft\Windows\Storage', WbemUser, WbemPassword);
   FWbemObjectSet := FWMIService.ExecQuery('SELECT * FROM MSFT_PhysicalDisk WHERE DeviceID = 0','WQL',wbemFlagForwardOnly);
   oEnum          := IUnknown(FWbemObjectSet._NewEnum) as IEnumVariant;
   Result := 0;
   try
      CoInitialize(nil);
      try
         while oEnum.Next(1, FWbemObject, iValue) = 0 do
         begin
            Result      := VarToInt(FWbemObject.MediaType);
            FWbemObject := Unassigned;
         end;
      finally
         CoUninitialize;
      end;
   except
      Result := 0
   end;
end;

function TDTSysinfo.TipoArmazenamentoDescricao(const ATipo: Integer): string;
begin
    case ATipo of
       3: Result := 'HDD';
       4: Result := 'SSD';
    else
       Result := 'N/A';
    end;

end;

function TDTSysinfo.TipoConexao: Integer;
const
  wbemFlagForwardOnly = $00000020;
  STATUS_CONNECTED    = 02;
  TYPE_UNKNOWN  = 0;
  TYPE_ETHERNET = 1;
  TYPE_WIFI     = 2;
  TYPE_VIRTUAL  = 3;
var
  FSWbemLocator, FWMIService, FWbemObjectSet, FWbemObject : OLEVariant;
  oEnum : IEnumvariant;
  iValue: LongWord;
begin;
   Result := TYPE_UNKNOWN;
   FSWbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
   try
      FWMIService   := FSWbemLocator.ConnectServer('localhost', 'root\CIMV2', '', '');
      FWbemObjectSet:= FWMIService.ExecQuery('SELECT * FROM Win32_NetworkAdapter','WQL',wbemFlagForwardOnly);
      oEnum         := IUnknown(FWbemObjectSet._NewEnum) as IEnumVariant;
      while (oEnum.Next(1, FWbemObject, iValue) = 0) and (Result = 0) do
      begin
         if not VarIsNull(FWbemObject.NetConnectionStatus) Then
         begin
            if FWbemObject.NetConnectionStatus = 02 then
            begin
                if Pos('ETHERNET', UpperCase( String(FWbemObject.NetConnectionID) ) ) > 0 then
                  Result := TYPE_ETHERNET
                else if Pos('WI-FI', UpperCase( String(FWbemObject.NetConnectionID) ) ) > 0 then
                  Result := TYPE_WIFI
                else if Pos('VIRTUAL', UpperCase( String(FWbemObject.NetConnectionID) ) ) > 0 then
                  Result := TYPE_VIRTUAL
            end;
         end;
         FWbemObject :=  Unassigned;
      end;
   finally
      FSWbemLocator  := Unassigned;
      FWMIService    := Unassigned;
      FWbemObjectSet := Unassigned;
      FWbemObject    := Unassigned;
   end;
end;

function TDTSysinfo.TPConexao: string;
begin
       Result := TIPOS_CONEXAO[TipoConexao];
end;

function TDTSysinfo.UserName: string;
begin
       Result := TDTComputerInfo.UserName;
end;

function TDTSysinfo.UsuarioLogado: string;
begin

end;

end.
